# React Component Code Style Specification

## 1. React Coding Conventions

- Use **functional components** with React Hooks.
- Avoid class components unless necessary for specific cases.
- Use `useCallback`, `useMemo`, `useEffect`, and other Hooks with dependency arrays optimized to reduce unnecessary re-renders.
- Component props must have **TypeScript declarations** with explicit and clear typing.
- Avoid using the `any` typeâ€”always use interfaces or `unknown` for typing.

---

## 2. CSS and Styling

- Use **CSS Modules** for component styles to avoid global style pollution. Example: `<div className={styles.container}>`.
- Maintain a **black-white-gray minimalist theme** for colors and visual styles.
- Style changes should follow a **clean, visually impactful design system** with professional, elegant designs.
- Each component must have a dedicated stylesheet placed alongside its `.tsx` file. Example:
  ```
  - src/components/HeroSection/HeroSection.tsx
  - src/components/HeroSection/HeroSection.module.csss
  ```

---

## 3. Styling Libraries

- Use **Tailwind CSS** for clarity, concision, and responsiveness wherever applicable.
- For icons, use established libraries such as **react-icons** (e.g., for chat icons, shells, and navigation icons).

---

## 4. Code Organization

- Each component must have its **dedicated SCSS Module file** placed alongside its `.tsx` file.
- Avoid cluttering directories with files unrelated to component code (e.g., examples or APIs).
- Extract **logic-related helpers** into reusable hooks or helper functions.
- Maintain strong **composition standards**.
- Avoid putting styles in a single centralized file - styles should be modular and associated with their respective components.

---

## 5. Export and Import Conventions

- Always use **named exports** for components, hooks, and utilities.

  ```tsx
  // Correct
  export const Button = () => {
    /* ... */
  };

  // Incorrect - avoid default exports
  export default function Button() {
    /* ... */
  }
  ```

- Avoid re-exporting default exports as named exports:

  ```tsx
  // Incorrect pattern to avoid
  export { default as Chat } from './components/Chat';

  // Correct approach
  export { Chat } from './components/Chat';
  // Where Chat.tsx uses: export const Chat = () => { /* ... */ };
  ```

- For barrel exports in index files, use direct named exports:

  ```tsx
  // Correct
  export { Button } from './Button';
  export { Card } from './Card';

  // Incorrect
  export { default as Button } from './Button';
  ```

---

## 6. Header and Comments

- All comments must be strictly in **English**. Example:
  ```ts
  // This component renders a sticky navigation bar triggered upon scrolling.
  ```
- Avoid redundant comments but provide enough context for functions, blocks, and complex logic.

---

## 7. React Context API

- Use **React Context API** for state management complexities and ensure decoupled structures with proper encapsulation.
- Do not introduce third-party state libraries unless architecturally justified.

---

## 8. Animations

- Use libraries like **framer-motion** for animations.
- Ensure smooth transitions, especially for critical components like Chat, Replayer, and Gallery.
- Follow specifications for linear animations, such as **vertical slides with fade-ins** for professional product behavior.

---

## 9. Performance

- Minimize redundant rendering by optimizing `useEffect` and avoiding unnecessary nested hooks.
- Handle **API calls** dynamically to avoid blocking UI rendering.
- Prioritize efficient computation mechanisms, especially for scroll height or performance-sensitive calculations (e.g., `setIsCalculatingHeight`).

---

## 10. Feature-Specific Guidelines

### Chat Components

- Separate elements like containers and **message styles** (User, Assistant) properly with Props interface annotations.
- Implement fluid animations for `thinking` response types, such as **"Bagel is Thinking"**.

### Replayer Components

- Input area must follow **structured 16:9 dimensions**.
- Ensure **smooth chronological transitions** for playback behavior, with optimized pauses and animations.
- Dynamically type messages based on **speed metrics** (e.g., characters per second).

### Gallery

- Implement features like **auto-scroll across frames** for rotating Wiper Images ("assistant visuals").

---

## 11. DRY-Conscious Refactoring

- Reuse abstractions for areas like Prompts, selectors, and shared scopes to ensure a **DRY (Don't Repeat Yourself)** codebase.

---

## 12. General Guidelines

- All code changes should adhere strictly to requirements without introducing unexpected behaviors.
- Follow the Prettier configuration as specified in package.json if exists.
- Prioritize maintainability in all code decisions.